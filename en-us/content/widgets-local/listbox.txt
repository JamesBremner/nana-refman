|name	=nana::listbox
|header	=<nana/gui/widgets/listbox.hpp>
|decl	=#class listbox;#
:The listbox represents a list of informations from which the user can select.

==base==
[[widget_object<category::widget_tag>]//./widgets/widget_object_widget_tag.htm] : public [[widget]]

==events==
[[general events]//./core/events.htm]
#checked(const [[arg_listbox]]&)#
:occurs when an item is checked or unchecked.
#selected(const [[arg_listbox]]&)#
:occurs when an item is selected or unselected.
#category_dbl_click(const [[arg_listbox_category]]&)#[#1.3]
:occurs when a category is double clicked.


==member types==
index_pair
:the representation of a category/item
index_pairs
:a set of index_pairs, a standard container, possibly #std::vector<index_pair>#
size_type
:an unsigned integral type
[[cat_proxy]/widgets/listbox-cat_proxy][#1.5]
:iterator to access category
[[item_proxy]/widgets/listbox-item_proxy][#1.5]
:iterator to access item
iresolver
:the input resolver that converts an object to an item
oresolver
:the output resolver that converts an item to an object
export_options
:the options of exporting items into a string variable
[[column_interface]][#1.5]
:column operations


==scheme==
#header_bgcolor#
:background color of header columns
#header_fgcolor#[#1.5]
:foreground color of header columns
#header_grabbed#
:background color of grabbed header column
#header_floated#
:background of header column when it is grabbed and moved
#item_selected#
:background color of item when it is selected
#item_highlighted#[#1.5]
:background color of item when it is highlighted
#selection_box#[#1.5]
:the color of selection box
#max_fit_content#[#1.4]
:the max column width which is generated by fit_content is allowed, in pixels. It is ignored when it is 0, or a non-zero value is passed to fit_content()
#min_column_width#
:the minimum width of column, excluding the suspension_width
#suspension_width#
:width of "..." in pixels
#text_margin#[#1.4]
:left/right margin to the text to determine the cell width. Width of cell = text_margin * 2 + text width + 1
#header_height#
:height of header, in pixels
#text_height#[#1.4.1]deprecated
:text height of item, in pixels. It will be set by the listbox with current font
#item_height_ex#
:extra height of item, in pixels.
#item_height#[#1.4.1]deprecated
:height of item, in pixels. It will be set by the listbox with forumal item_height = text_height + item_height_ex
#header_splitter_area_before#
:response area before header splitter
#header_splitter_area_after#
:response area after header splitter
#mouse_wheel#
:the number of lines/characters to scroll when vertical/horziontal mouse wheel is moved


==member functions==
constructors
:constructs a listbox widget instance
decl=#listbox();#
decl=#listbox(window handle, bool visible);#
decl=#listbox(window handle, const rectangle& ={}, bool visible = true);#
:Constructs the listbox
:0) Default constructor, it constructs the object of listbox, but it doesn't create UI element.
:1,2) Constructs the instance and creates UI element of the listbox.
--parameters--
handle
:a handle to a parent widget for the listbox widget.
visible
:a boolean flag that specifies the visibility of the listbox after creating.
--end--

---Associative element access---
assoc[#1.4]
:access specified category
decl=#template<typename Key> [[cat_proxy]] assoc(Key&& key);#
:Returns the category that is mapped to the specified key, it inserts a new category if such key does not exist.
:Iterators are invalidated if an insertion is performed.
--parameters--
key
:the key of the category to return
--returns--
:The mapped [[cat_proxy]] associated with the key.
--see also--
assoc_at
--end--

assoc_at[#1.4]
:access specified category with bounds checking
decl=#template<typename Key> [[cat_proxy]] assoc_at(Key&& key);#
decl=#template<typename Key> const [[cat_proxy]] assoc_at(Key&& key) const;#
:Returns the mapped category which is associated with the key. Bounds checking is performed, exception of type #std::out_of_range# will be thrown if suck key does not exist.
--parameters--
key
:the key of the category to return
--returns--
:The mapped [[cat_proxy]] associated with the key.
--except--
std::out_of_range
:if such key doesn't exist.
--see also--
assoc
--end--

assoc_erase[#1.4]
:erases a category
decl=#template<typename Key> void erase_key(const Key& key);#
decl=#template<typename Key> void erase_key(Key&& key);#
:Removes a category which is associated with the specified key. If the key does not exist, no category will be removed.
--parameters--
key
:a key object indicates a category to remove
--end--

---Column access---
column_at[#1.5]
:access a specified column with bounds-checking
decl=#[[column_interface]]& column_at(size_type pos, bool disp_order = false);#
decl=#const [[column_interface]]& column_at(size_type pos, bool disp_order = false) const;#
:Returns a reference to the column at specified location pos. Bounds checking is performed.
--parameters--
pos
:location of the column to access.
disp_order
:Indicates whether the pos is display positon or absolute position. If this parameter is #true#, the pos represents display position. If the parameter is #false#, the pos represents absolute position.
--returns--
:a reference of column to the requested position.
--except--
std::out_of_range
:if #!(pos < column_size())#
--end--

column_size
:returns the number of columns
decl=#size_type column_size() const;#
:Returns the number of columns in the listbox.
--returns--
:The number of columns in the listbox.
--end--

---Element access---
at
:access a spcecifed content with bounds checking
decl=#[[cat_proxy]] at(size_type pos);#
decl=#const [[cat_proxy]] at(size_type pos) const;#
decl=#[[item_proxy]] at(const index_pair& abs_pos);#
decl=#const [[item_proxy]] at(const index_pair& abs_pos) const;#
:Returns an iterator to the content at specified location pos. Bounds checking is performed, exception of type #std::out_of_range# will be thrown on invalid access.
:    0,1) Access a category.
:    2,3) Access an item.
--parameters--
pos
:location of the category to access.
abs_pos
:absolute position of the item to access.
--returns--
:an iterator to the requested position.
--except--
std::out_of_range
:if pos is invalid.
--see also--
operator[]
--end--

operator[][#1.4]
:access a specified content without bounds checking
decl=#[[cat_proxy]] operator[](size_type pos);#
decl=#const [[cat_proxy]] operator[](size_type pos) const;#
decl=#[[item_proxy]] operator[](const index_pair& abs_pos);#
decl=#const [[item_proxy]] operator[](const index_pair& abs_pos) const;#
:Returns an iterator to the content at specified location pos. No bounds checking is performed, therefore the behavior is undefined if location pos is invalid.
:    0,1) Access a category.
:    2,3) Access an item.
--parameters--
pos
:location of category to access.
abs_pos
:absolute position of item to access.
--returns--
:an iterator to the requested position.

--see also--
at
--end--

---Observers---
checked
:returns indexes of all checked items
decl=#selection checked() const;#
:Returns indexes of all checked items in all categories. A checked item is that the toggle of an item is checked when the listbox is checkable.
--returns--
:selection, a std container that contains a set of index_pair elements which point to checked items.
--end--

selected
:returns indexes of all selected items
decl=#selection selected() const;#
:Returns indexes of all check items in all categories. A selected item is that an item is highlighted by clicking.
--returns--
:selection, a std container that contains a set of index_pair elements which point to checked items.
--end--

visible_header
:determines the visibility of the listbox header
decl=#bool visible_header() const;#
:Determines the visibility of the listbox header.
--returns--
:#true# if the header is visible, #false# otherwise.
--end--

---Operations---
append_header
:appends a new column
decl=#size_type append_header(std::string text, unsigned width = 120);#
decl=#size_type append_header(std::wstring text, unsigned width = 120);#
:Appends a new column at the end.
--parameters--
text
:The title of the new column. The only UTF-8 encoded string is accepted for #std::string# overloading.
width
:The width of column, in pixel.
--returns--
:the index of new column.
--end--

auto_draw
:enables/disables automatic drawing
decl=#void auto_draw(bool enable);#
:When an operation was performed, listbox will perform a draw for the updated state, this is a useful feature which makes the listbox in the latest display state.
:
:But in some situations the fact that automatically performed drawing may be redundant, for example, appending items in a loop will performs redraw many times, it may cause low efficent. In this case, automatic drawing should be disabled before entering the loop, and then, re-enable automatic drawing after loop finished. When re-enable automatic drawing, the listbox will perform drawing for refresh UI.
--parameters--
enable
:indicates whether to enable or disable the auto-draw.
--end--

avoid_drawing[#1.4]
:performs a function
decl=#template<typename Function> void avoid_drawing(Function fn);#
:It's a helper function that performs a specified function. It disables automatic drawing during performing, re-enables automatic drawing after performing. An implement of avoid_drawing
```
template<typename Function>
void avoid_drawing(Function fn)
{
	this->auto_draw(false);
	try
	{
		fn();
	}
	catch (...)
	{
		this->auto_draw(true);
		throw;
	}
	this->auto_draw(true);
}
```
--parameters--
fn
:an function object to perform
--end--

checkable
:enables/disables the checkable listbox item.
decl=#void checkable(bool enable);#
:Enables/disables the listbox item to be checkable. If a listbox is checkable, it shows an extra toggle in front of item text.
--parameters--
enable
:indicates whether to enable or disable the listbox to be checkable.
--except--
any exception
:throws what fn throws
--end--

scroll[#1.2]
:scrolls the view to the bottom/top
decl=#void scroll(bool to_bottom, size_type cat_pos = ::nana::npos);#
decl=#void scroll(bool to_bottom, const index_pair& pos);#
:Scrolls the category or item to the bottom/top.
--parameters--
to_bottom
:indicates whether to scroll the view to the bottom or the top.
cat_pos
:specifies a category to scroll. If it is npos, scrolls the last category.
pos
:specifies the item to scroll.
--end--

show_header
:shows/hides the listbox header
decl=#void show_header(bool show);#
:Shows/hides the listbox column header.
--parameters--
show
:indicates whether to show or hide the listbox column header.
--end--

---Modifiers---
append
:appends a new category at the end
decl=#[[cat_proxy]] append(std::string name);#
decl=#void append(std::initializer_list<std::string> names);#
:Appends categories.
--parameters--
name
:The name of new category
names
:The names of new categories, specified by initializer list
--returns--
:the [[cat_proxy]] refers to the new category.
--end--

clear
:clears items of a specified category
decl=#void clear(size_type pos);#
decl=#void clear();#
:Removes all items from a specified category, the category itself will not be removed.
:  0) Removes all items from a specified category.
:  1) Removes all items from all categories.
--parameters--
pos
: the position of a category which its items will be removed.
--except--
std::out_of_range
:if pos is not less than the number of categories. 
--end--

erase[#1.5]
:erases categories
decl=#void erase(size_type pos);#
decl=#void erase();#
decl=#void erase(index_pairs indexes);#[#1.5]
decl=#[[item_proxy]] erase([[item_proxy]] item);#
:Removes categories, all items of the category will be removed as well.
:  0) Removes a specified category.
:  1) Removes all categories.
:  2) Removes specified items at one time. It is faster than 3) if many items to be delete.
:  3) Removes a specified item.
--parameters--
pos
:the position of a category.
item
:an iterator pointing to an item removed.
indexes
:positions of items to be deleted.
--returns--
:3) returns an iterator to the next of the removed item.
--except--
std::out_of_range
:if pos isn't less than the number of categories.
--end--

insert
:inserts a new category
decl=#[[cat_proxy]] insert([[cat_proxy]] pos, std::string text);#
decl=#[[cat_proxy]] insert([[cat_proxy]] pos, std::wstring text);#
:Inserts a new category before pos.
--parameters--
pos
:the position before which a category will be inserted.
text
:the title of the new category. #std::string# is for UTF-8 encoded string.
--returns--
:a [[cat_proxy]] pointing to the new category inserted.
--except--
std::out_of_range
:if pos is invalid.
--end--

insert_item
:inserts a new item
decl=#void insert_item(const index_pair& abs_pos, std::string text);#
decl=#void insert_item(const index_pair& abs_pos, std::wstring text);#
:Inserts an item before a specified absolute position.
--parameters--
abs_pos
:the absolute position before which an item will be inserted.
text
:the title of the new item, #std::string# is for UTF-8 encoded string.
--except--
std::out_of_range
:if abs_pos is invalid.
--end--

==remark==
:Before appending items to the listbox, a header has to be created. The header describes columns of the listbox.
```
//nana::listbox list;
list.append_header("Name");
list.append_header("Age");
```
:A category is used to group items. Listbox provides a default category whose index is zero.
```
auto cat = list.at(0); //access the default category.

cat.append({"Jack", "20"});	//Insert an item

cat.push_back("Rose");		//Insert another item
cat.back().text(1, "21");
```
:Automatic drawing is a feature that listbox automatically refreshs UI when an insertion/deleting/modification of items occurs. But if a listbox inserts a hunders of items, the automatic drawing will cause low efficent. So the automatic drawing should be disabled before insertion.
```
auto cat = list.at(0);

list.auto_draw(false);	//Disable automatic drawing
for(auto & person : container) //Many items
{
	cat.push_back(person.name);
	cat.back().text(1, person.age);
}
list.auto_draw(true);	//Re-enable automatic drawing

//OR
list.avoid_drawing([&cat, &container]
{
	for(auto & person : container) //Many items
	{
		cat.push_back(person.name);
		cat.back().text(1, person.age);
	}
});
```
:
:Other Links
:
:[[Using STL container]//https://sourceforge.net/p/nanapro/blog/2016/04/preview-of-listbox-model/]
:The listbox category can attach an existing standard sequence container. 
:
:[[Associative Category]//https://github.com/cnjinhao/nana/wiki/Listbox-Associative-Category]
:An easy way to address a category.
:
:[[Inline widgets]//https://github.com/cnjinhao/nana/wiki/Creating-Inline-Widgets-for-Listbox]
:Create nested widgets into the listbox items. 

==see also==
[[arg_listbox]]
[[arg_listbox_category]]
[[cat_proxy]/widgets/listbox-cat_proxy]
[[item_proxy]/widgets/listbox-item_proxy]
[[column_interfae]]