|name	=nana::spinbox
|header	=<nana/gui/widgets/spinbox.hpp>
|decl	=#class spinbox;#
:A spinbox widget allows a user choosing a value in the given range. It supports a group of integers, floating-point numbers and texts.

==base==
[[widget_object<category::widget_tag>]//./widgets/widget_object_widget_tag.htm] : public [[widget]]

==events==
[[general events]//./core/events.htm]

==member functions==
constructors
:constructs a spinbox instance
decl=#spinbox();#
decl=#spinbox(window parent, bool visible);#
decl=#spinbox(window parent, const rectangle& r={}, bool visible=true);#
:Constructs a spinbox
:  0), Default constructor
:  1-2), constructs the spinbox and creates a spin box to the window.
--parameters--
parent
:a handle to the window to which a spin box is to be created.
r
:a rectangle for the position and dimension of the spin box.
visible
:indicates whether to show or hide the spin box. If this parameter is #true#, shows the widget. If the parameter is #false#, hides the widget.
--end--

editable
:sets/gets whether the spinbox accepts user keyboard input
decl=#void editable(bool accept);#
decl=#bool editable() const;#
:If a spinbox is editable, the input will be checked for restriction by the specified range.
:  0), enables/disables the spinbox editable attribute. If it is editable, it may stop user input if the input is out of range.
:  1), determines whether the spinbox is editable.
--parameters--
accept
:indicates whether to enable or disable user keyboard input.
--returns--
:#true# if the spinbox is editable, #false# otherwise.
--end--

---Element access---
value
:gets/sets the value
decl=#std::string value() const;#
decl=#void value(const std::string& val);#
:The value indicates the current chosen value in the specified range.
:  0), It returns value, it is different from the #caption()# method which returns a text that represents the value with modifiers.
:  1), When sets the value, it checks the new value whether it is allowed by the range.
--parameters--
val
:a new value.
--returns--
:The current value of the spinbox.
--end--

to_int/to_double
:gets the value as a number
decl=#int to_int() const;#
decl=#double to_double() const;#
:  0), Get the value as an integer.
:  1), Get the value as a floating-point number.
--returns--
:0), returns an integer.
:1), returns an floating-point number.
--except--
std::invalid_argument
:if no conversion could be performed
std::out_of_range
:if the converted value would fall out of the range of the result type
--end--

---Range access---
range[#1.5]
:sets range
decl=#void range(int begin, int last, int step);#
decl=#void range(double begin, double last, double step);#
decl=#void range(std::vector<std::string> values_utf8);#[#1.5]
:Gives the range for user input
: 0,1), The range of [begin, lasat] with the specified step.
: 2), the texts for the spinbox, and the characters that appear in these texts are allowed to input.
--parameters--
begin
:the begin value for the range.
last
:the last value for the range.
step
:the step value for the range.
values_utf8
:the texts that user can be chosen from the spinbox. It must be UTF-8 encoded.
--end--

range_string/range_int/range_double[#1.5]
:returns the range
decl=#std::vector<std::string> range_string() const;#[#1.5]
decl=#std::pair<int, int> range_int() const;#[#1.5]
decl=#std::pair<double, double> range_double() const;#[#1.5]
:Gets current range.
--returns--
:range of spinbox.
--except--
std::runtime_error
:if the requested type of range unmatchs the actual range type.
--end--

---Modifiers---
modifier
:sets modifiers
decl=#void modifier(std::wstring prefix, std::wstring suffix);#
decl=#void modifier(std::string prefix_utf8, std::string suffix_utf8);#
:The modifeirs describe the value of the spinbox, the content = prefix + value + suffix.
:When the spinbox loses its keyboard focus, the modififers are displayed. When the spinbox gets its keyboard focus, the modifiers are hidden for user input without interference.
--parameters--
prefix
:text for prefix.
suffix
:text for suffix.
prefix_utf8
:text for prefix, in UTF-8 encoded.
suffix_utf8
:text for suffix, in UTF-8 encoded.
--end--

