|name	=nana::slider::renderer_interface
|header	=<nana/gui/widgets/slider.hpp>
|decl	=#class slider::renderer_interface;#
:The #class renderer_interface# provides an interface for creating a user-customized renderer for a slider.

==member types==
graph_reference
:a reference of nana::paint::graphics
scheme
:a type for scheme
data_bar
:geometrics of slider bar
data_slider
:geometrics of slider
data_adorn
:geometrics of slider adorn
data_vernier
:geometrics of slider vernier

==member functions==
adorn
:draws adorn
decl=#void adorn(window handle, graph_reference graph, const data_adorn& data, const scheme& schm);#
:Method of adorn's drawing.
--parameters--
handle
:a handle to the slider
graph
:a reference to the graphics of the slider
data
:geometrics of the slider adorn
schm
:scheme of the slider
--end--

background
:draws background
decl=#void background(window handle, graph_reference graph, bool transparent, const scheme& schm);#
:Method of drawing of background.
--parameters--
handle
:a handle to the slider
graph
:a reference to the graphics of the slider
transparent
:indicates whether the renderer to draw a transparent background
schm
:scheme of the slider
--end--

bar
:draws bar
decl=#void bar(window handle, graph_reference graph, const data_bar& data, const scheme& schm);#
:Method of drawing the bar.
--parameters--
handle
:a handle to the slider
graph
:a reference to the graphics of the slider
data
:geometrics of the slider bar
schm
:scheme of the slider
--end--

slider
:draws slide block
decl=#void slider(window handle, graphics graph, mouse_action maction, const data_slider& data, const scheme& schm);#
:Method a drawing the slider
--parameters--
handle
:a handle to the slider
graph
:a reference to the graphics of the slider
maction
:current mouse action of the slider
data
:geometrics of the slide block
schm
:scheme of the slider
--end--

vernier
:draws vernier
decl=#void vernier(window handle, graph_referece graph, const data_vernier& data, const scheme& schm);#
:Method of drawing vernier.
--parameters--
handle
:a handle to the slider
graph
:a reference to the graphics of the slider
data
:geometrics of the vernier
schm
:scheme of the slider
--end--

==remark==
:The renderer interface defines some geometrics data types for the parts of slider, the geometrics data are generated by the slider and are passed into renderer for drawing.
```
//The bar is a visual rectangle that indicates the range of moving for the slider
struct data_bar
{
	bool vert;	//indicates whether the slider is vertical
	rectangle area;	//position and size of bar
	unsigned border_weight;	//the border weight in pixels.
};

//The slider is a block that user can drag and move it to changes the value the slider represents
struct data_slider
{
	bool vert;	//indicates whether the slider is vertical
	double pos;	//position of the block
	unsigned border_weight;	//the border weight in pixels
	unsigned weight;	//the width or height of the slider, depends on vert
};


//The adorn is a rectangle area represents the position of mouse in the bar
struct data_adorn
{
	bool vert;	//indicates whether the slider is vertical
	point bound;	//x indicates the begin position, y indicates the end position
	int fixedpos;	//left point of adorn if vert is vert, top point of adorn if vert is true
	unsigned block; //width of adorn if vert is true, height of adorn if vert is true
	unsigned vcur_scale;	//the position of slider block
};

//The vernier is a text label when mouse moves on the slider
struct data_vernier
{
	bool vert;	//indicates whether the slider is vertical
	int position;		//position of vernier
	int end_position;	//end position
	unsigned knob_weight;	//weight of vernier
	std::string text;	//text of vernier
};
``` 


==see also==
[[slider]]