|name	=nana::form
|header =<nana/gui.hpp>
|decl	=#class form;#
:The form widget represents a popup window. Overall it is a root widget(see [[Overview of widgets]//./widgets/overview.htm]) which attaches the OS/Windowing system's native window.

==base==
[[widget_object<category::root_tag>]//./widgets/widget_object_root_tag.htm] : public [[widget]]

==events==
[[general events]//./core/events.htm]
unload
:occurs when the form is requested to close

==member types==
appear
:a typedef name of nana::appear, it is a helper template class for creating appearance of the form.

==member functions==
constructors
:constructs the form widget
decl=#form(const rectangle& rect = API::make_center(300, 200), const appearance& appear = {});#
decl=#form(const form& owner, const ::nana::size& size= {300, 200}, const appearance& appear = {});#
decl=#form(window owner, const ::nana::size& size = {300, 200}, const appearance = {});#
decl=#form(window owner, const rectangle& rect, const appearance = {});#
:The form's constructors always create a UI element, it is a root widget(see [[Overview of widgets]//./widgets/overview.htm]), so that the class does not provide a create() method to create the UI elelement.
:  0) Default constructor, it creates the form with specified size, position and appearace.
:  1) Copy constructor, it does not copy the resource from the onwer window, it creates a form with the owner.
:  2) Creates the form with the specified size and appearance, and the form will be positioned at the center of screen.
:  3) Creates the form with the spcified position, size and appearance.
--parameters--
owner
:specifies an owner for the form
rect
:the position and size for the new form
size
:specifies the size for the form, and the form will be positioned at the center of screen
appear
:an appearance for the form
--end--

modality
:sets a modal window
decl=#void modality() const;#
:Sets the modal window, it blocks the routine and only interacts with the form until the form is closed. Only a form which is created with an owner can be set a modal window.
--end--

wait_for_this
:blocks the routine until the form is closed
decl=#void wait_for_this();#
:Blocks the routine until the form is closed. When it is blocking, user is allowed to interact with other windows.
--end--

---Access place---
collocate[#1.4]
:collocates the [[place]//./utilities/place.htm]
decl=#void collocate() noexcept;#
:Collocates the internal [[place]//./utilities/place.htm] object. If the form doesn't have a [[place]//./utilities/place.htm] object, nothing will happen.
--end--

div[#1.4]
:sets a new div-text
decl=#void div(const char* div_text);#
:Sets a new div-text. It will create a [[place]//./utilities/place.htm] object if the form doesn't have a [[place]//./utilities/place.htm] object.
--parameters--
div_text
:a string of div-text
--end--

get_place[#1.4]
:returns a reference of the [[place]//./utilities/place.htm]
decl=#[[place]//./utilities/place.htm]& get_place();#
:Returns a referece of the [[place]//./utilities/place.htm] object. It will create a [[place]//./utilities/place.htm] object if the form doesn't have a [[place]//./utilities/place.htm] object.
--returns--
:The reference of the internal [[place]//./utilities/place.htm] object.
--end--

operator[][#1.4]
:access a field
decl=#[[place]//./utilities/place.htm]::field_reference operator[](const char* field_name);#
:Access a field with a specified name. It creates a field if the requested field doesn't exist.
--parameters--
field_name
:name of the requested field
--returns--
:The reference of the requested field.
--end--

==remark==
:When instances a form widget, the form window starts immediately.
```
#include <nana/gui.hpp>
int main()
{
	using namespace nana;
	form fm;
	fm.show();	//It's OK, the window is created when it constructs
	exec();
}
```
:Creates a modal form
:A modal form blocks the routine and only interacts with the modal form until the modal form is closed. Generally, a modal form is created during an event handler function, for example, open a form to ask a user for inputs when the user clicks a button.
```
int main()
{
	using namespace nana;
	form fm;
	fm.events().click([&fm]{
		form fm_modal(fm);	//A owner is required for the modal form
		fm_modal.modality();	//It shows the fm_modal and enters a routine for modal form.
		std::cout<<"modal form was closed"<<std::endl; //A modal form will block the routine til it is closed.
	});
	fm.show();
	exec();
}
```

==see also==
[[Overview of widgets]//./widgets/overview.htm]
[[nested_form]]


