|name	=nana::menu
|header	=<nana/gui/widgets/menu.hpp>
|decl	=#class menu;#
:The menu widget is a list of items that specifies options or group of options for an application.

==member types==
checks
:an enum class for kinds of check options.
renderer_interface
:the interface of the menu item renderer. See the [remark].
[[item_proxy]/widgets/menu-item_proxy]
:proxy to access menu item.
event_fn_t
:a type of #std::function<void([[item_proxy]/widgets/menu-item_proxy]&)>#.

==member functions==
constructor
:constructs a menu instance
decl=#menu();#
:The class menu only has a default constructor.
--end--

---Manipulators---
close
:closes the menu
decl=#void close();#
--end--

check_style
:sets check style
decl=#void check_style(std::size_t pos, checks style);#
:Sets the check style for an item.
: a), option is to group the contiguous items whose check styles are option. When an item in a group is selected, other items in the group automatically are unselected.
: b), hightlight is to enable the item to be selectable.
--parameters--
pos
:position to the requested item
style
:check style
--except--
std::out_of_range
:if position is invalid.
--end--

checked
:checks/unchecks a specified item
decl=#void checked(std::size_t pos, bool chk);#
decl=#bool checked(std::size_t pos) const;#
:Changes/determines the status of check.
:  0), Checks/unchecks a specified item.
:  1), Determines whether an item is checked.
:The check behaves differently depending on check_style.
--parameters--
pos
:the position to the requested item
chk
:indicates whether to check or uncheck the item
--returns--
:1), Returns #true# if the item is checked, #false# otherwise.
--end--

enabled
:enables/disables the mouse and keyboard input for the item
decl=#void enabled(std::size_t pos, bool enb);#
decl=#bool enabled(std::size_t pos) const;#
--parameters--
pos
:the position to the requested item.
enb
:indicates whether to enable or disable the item.
--returns--
:1), Returns #true# if the item is enabled, #false# otherwise.
--end--

popup/popup_await
:displays the menu
decl=#void popup(window owner, int x, int y);#
decl=#void popup_await(window owner, int x, int y);#
:displays the pop-up menu above the owner window at the specified position.
: 0), popup returns immediately when the menu get displayed.
: 1), popup_await blocks until the displayed menu get closed.
--parameters--
owner
:the handle to the owner window.
x
:x-axis coordinate to the owner window.
y
:y-axis coordinate to the owner window.
--end--

---Modifiers---
answerer
:modifies the handler of the specified item
decl=#void answerer(std::size_t pos, const event_fn_t& evt_fn);#
--parameters--
pos
:the position to requested item.
evt_fn
:handler of the menu item.
--end--

append
:appends an item to the menu
decl=#[[item_proxy]/widgets/menu-item_proxy] append(std::string title, const event_fn_t& evt_fn = {});#
--parameters--
title
:title of menu item, in UTF-8 encoded.
evt_fn
:handler of menu item.
--returns--
:returns an [[item_proxy]/widgets/menu-item_proxy] to the new item.
--end--

append_splitter
:appends a horizontal splitter
decl=#void append_splitter();#
--end--

clear
:erases all of items
decl=#void clear();#
--end--

create_sub_menu
:creates a sub menu for the specified item
decl=#menu* create_sub_menu(std::size_t pos);#
--parameters--
pos
:the position to the requested item.
--except--
std::out_of_range
:if position is invalid.
--returns--
:the pointer to the created sub menu.
--end--

destroy_answer
:sets an handler for destroying
decl=#void destroy_answer(std::function<void()> fn);#
:sets an handler for the callback while the menu window is destroying.
--parameters--
fn
:the handler for destroying.
--return--

erase
:removes an item
decl=#void erase(std::size_t pos);#
--parameters--
pos
:the position to the item to be deleted
--end--

gaps
:sets the gap between a menu and its sub menu.
decl=#void gaps(const point& gv);#
--parameters--
gv
:the value of gap for both x-axis and y-axis.
--see also--
[[Using Menu]//https://github.com/cnjinhao/nana]
--end--

image
:sets an image
decl=#void image(std::size_t pos, const paint::image& img);#
:Sets an image for menu item icon.
--parameters--
pos
:the position to the requested item to be set an icon
img
:the image
--except--
std::out_of_range
:if position is invalid.
--end--

insert[#1.5]
:inserts new item at specified position
decl=#[[item_proxy]/widgets/menu-item_proxy] insert(std::size_t pos, std::string title, const event_fn_t& evt_fn = {});#
:It will invalidate the existing item proxies from the specified position.
--parameters--
pos
:the position where new item to be inserted.
title
:title of menu item, in UTF-8 encoded.
evt_fn
:handler of menu item.
--returns--
:returns an [[item_proxy]/widgets/menu-item_proxy] to the new item.
--end--

link
:links a menu as sub menu to an item
decl=#bool link(std::size_t pos, menu& menu_obj);#
decl=#menu* link(std::size_t pos) const;#
--parameters--
pos
:the position to the requested item
menu_obj
:the reference to a menu object which is a sub menu for the item
--except--
std::out_of_range
:if position is invalid.
--returns--
:0), Returns #true# if link successfully, #false# otherwise.
:1), Returns the pointer to the sub menu.
--end--

text[#1.5.1]
:changes title of an item
decl=#void text(std::size_t pos, std::string title);#[#1.5]
decl=#std::string text(std::size_t pos) const;#[#1.5.1]
--parameters--
pos
:position to the requested item.
title
:title of the item, in UTF-8 encoded.
--except--
std::out_of_range
:if the position is invalid.
--returns--
:text of the specified item.
--end--

==remark==
:The definition of renderer_interface.
```
class renderer_interface
{
public:
	using graph_reference = nana::paint::graphics &;

	//Defines some states for a menu item.
	enum class state
	{
		normal,	//State normal
		active	//State active indicates a mouse hovers the item or keyboard selects the item.
	};

	//Some basic attributes of an item that are rendered for representing the item status.
	struct attr
	{
		state item_state;	//See enum class state.
		bool enabled;		//Indicates whether the item is enabled.
		bool checked;		//Indicates whether the item is checked.
		checks check_style;	//Represents check style of the item.
	};

	virtual ~renderer_interface() = default;

	//Draws background of whole menu.
	virtual void background(graph_reference, window) = 0;

	//Draws the item border and background.
	virtual void item(graph_reference, const nana::rectangle&, const attr&) = 0;

	//Draws the icon of the item.
	virtual void item_image(graph_reference, const nana::point&, unsigned image_px, const paint::image&) = 0;
	
	//Draws the title of the item.
	virtual void item_text(graph_reference, const nana::point&, const std::string&, unsigned text_pixels, const attr&) = 0;
	
	//Draws a spin to indicates the item which links a sub menu.
	virtual void sub_arrow(graph_reference, const nana::point&, unsigned item_pixels, const attr&) = 0;
};
```
:An [[example]//https://github.com/cnjinhao/nana/wiki/Using-Menu#customizing_renderer] to customize a menu renderer.

==see also==
[[Using menu]//https://github.com/cnjinhao/nana/wiki/Using-Menu]
[[menubar]]